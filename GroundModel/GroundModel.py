
import globals
import PolarGrid
import Seed
import regression
import segment
import result

from theano import function, config, shared, tensor
import numpy as np


#/////////////////////////////////////////////////////////////////////////
#//LOAD THE POLAR GRID 3D Data POINTS FROM BINARY FILE
#/////////////////////////////////////////////////////////////////////////

PolarGrid.getSectorsAndBins()
#PolarGrid.SanityCheckPolarGrid(globals.printArrayInformation,globals.saveArrayInformation)

#///////////////////////////////////////////////////////////////////////////
#//LOOP OVER M SECTORS TO EXTRACT 3D Data POINTS FROM EACH SECTOR AT A TIME/
#///////////////////////////////////////////////////////////////////////////

#for PGi in range(1,globals.M-1):
for PGi in range(1,2):
    
    #/////////////////////////////////////////////////////////////
	#//EXTRACT SECTOR ////////////////////////////////////////////
	#/////////////////////////////////////////////////////////////

    globals.PGi.extractSector(PGi)
    #globals.PGi.sanityCheck(globals.printArrayInformation,globals.saveArrayInformation,'PGi-' + str(PGi))

    globals.Snew()
    globals.Sp()
    
    #/////////////////////////////////////////////////////////////
	#//EXTRACT THE SEED 3D POINTS INSIDE A SECTOR/////////////////
	#/////////////////////////////////////////////////////////////

    globals.Snew.extractSeed()
    #globals.Snew.sanityCheck(globals.printArrayInformation,globals.saveArrayInformation,'Snew-' + str(PGi))

    #/////////////////////////////////////////////////////////////
	#//START LOOP TO FIT THE GAUSSIAN EQUATION TO FIND THE GROUND
	#/////////////////////////////////////////////////////////////

    getCount = function([],globals.Snew.X.shape[0])
    count = np.uint16(getCount())

    while count > 0:

        globals.Test()

        #/////////////////////////////////////////////////////////
		#//ADD SNEW TO SP ////////////////////////////////////////
		#/////////////////////////////////////////////////////////

        globals.Sp.append(globals.Snew)
        #globals.Sp.sanityCheck(globals.printArrayInformation,globals.saveArrayInformation,'Sp-' + str(countSnew))

        globals.Snew.empty()

         #/////////////////////////////////////////////////////////
		#//GET NEW SAMPLE OF TEST 3D Data POINTS//////////////////
		#/////////////////////////////////////////////////////////

        globals.Test.extractTest()
        #globals.Test.sanityCheck(globals.printArrayInformation,globals.saveArrayInformation,'Test-' + str(countSnew))

        #/////////////////////////////////////////////////////////
		#//APPLY GAUSSIAN REGRESSION MODEL ///////////////////////
		#/////////////////////////////////////////////////////////

        globals.Model = regression.train()

        getCount = function([],globals.Snew.X.shape[0])
        count = np.uint16(getCount())

      
#/////////////////////////////////////////////////////////
#//SEGMENT////////////////////////////////////////////////
#/////////////////////////////////////////////////////////

    for j in range(1,globals.N):

        segment.do(j)

#/////////////////////////////////////////////////////////////////
#//SHOW RESULTS
#/////////////////////////////////////////////////////////////////

result.plot()